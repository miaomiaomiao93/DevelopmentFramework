// <autogenerated>
//   This file was generated by T4 code generator Configuration.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

//=============================================================================
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
// </auto-generated>
//=============================================================================
using Model.Base.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using IDal;
using System.Data.Entity.Validation;
using System.Data.Entity;
using System.Linq.Expressions;
using EntityFramework.Extensions;
using System.Runtime.Remoting.Messaging;
using System.Reflection;
using System.Data.Entity.Infrastructure;
namespace Dal
{
    public class GoodsDal : BaseDal<GoodsModel>, IGoodsDal
    {
        public GoodsModel AddGoods(long? id, string name, string company, string description, string ThumbUrl, string[] PicUrls, string ModelUrl, string typeName, string[] tagArr)
        {   
            TypeModel typeModel = this.entity.Set<TypeModel>().Where(t => t.TypeName == typeName).FirstOrDefault();
            List<TagModel> tagList = this.entity.Set<TagModel>().Where(t => tagArr.Contains(t.TagName)).ToList();
            GoodsModel goodsModel = this.entity.Set<GoodsModel>().Add(new GoodsModel() { BuildTime = DateTime.Now, CollectCount = 0, Company = company, Description = description, DownloadCount = 0, GoodsName = name, ImgUrl1 = PicUrls[0], ImgUrl2 = PicUrls[1], ImgUrl3 = PicUrls[2], ModelUrl = ModelUrl, State = 1, ThumbUrl = ThumbUrl, UpdateTime = DateTime.Now, TypeModel = typeModel, TagModels = tagList });

            if (this.entity.SaveChanges() > 0)
            {
                return goodsModel;
            }
            return null;
        }



        public bool UpdateGoods(long? id, string name, string company, string description, string ThumbUrl, string[] PicUrls, string ModelUrl, string typeName, string[] tagArr)
        {
            TypeModel typeModel = this.entity.Set<TypeModel>().Where(t => t.TypeName == typeName).FirstOrDefault();
            ICollection<TagModel> tagModels = this.entity.Set<TagModel>().Where(t => tagArr.Contains(t.TagName)).ToList();
            var goodsModel = this.entity.Set<GoodsModel>().Where(t => t.Id == id).FirstOrDefault();

            //goodsModel.TagModels
            
            //this.entity.Entry<GoodsModel>(goodsModel).State = System.Data.Entity.EntityState.Modified;
            //this.entity.SaveChanges(); 
            goodsModel.GoodsName = name;
            goodsModel.Company = company;
            goodsModel.Description = description;
            goodsModel.ThumbUrl = ThumbUrl;
            goodsModel.ImgUrl1 = PicUrls[0];
            goodsModel.ImgUrl2 = PicUrls[1];
            goodsModel.ImgUrl3 = PicUrls[2];
            goodsModel.ModelUrl = ModelUrl;
            goodsModel.TypeModel = typeModel;
            if (goodsModel.TagModels != tagModels)
            {
                goodsModel.TagModels = tagModels;
            }
            this.entity.Entry<GoodsModel>(goodsModel).State = System.Data.Entity.EntityState.Modified;

            if (this.entity.SaveChanges() > 0)
                return true;
            return false;
        }
    }
}
