<#+
// <copyright file="DbContextOnly.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class DbContextOnly : CSharpTemplate
{
	public string FileName
	{
		get
			{
				return "DbContextOnly.cs";
			}
	}
	private string _modelNameSpace;
	public DbContextOnly(string modelNameSpace)
	{
		_modelNameSpace=modelNameSpace;
	}
	public override string TransformText()
	{
		base.TransformText();
#>
//=============================================================================
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
// </auto-generated>
//=============================================================================
using <#=_modelNameSpace#>;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading.Tasks;
namespace <#= DefaultNamespace.Split('.')[0] #>
{
	public  class DbContextOnly
	{
		  /// <summary>
		 /// 创建线程内唯一对象
		 /// </summary>
		 /// <returns></returns>
		 public static DbContext CreateEF()
		 {
			 DbContext dbContext = (DbContext)CallContext.GetData("dbContext");
			 if (dbContext == null)
			 {
				 dbContext = new MyContext();
				 CallContext.SetData("dbContext", dbContext);
			 }
			 return dbContext;
		 }
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
