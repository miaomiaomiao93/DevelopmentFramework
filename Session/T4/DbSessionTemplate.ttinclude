<#+
// <copyright file="DbSessionTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class DbSessionTemplate : CSharpTemplate
{
	private string _template;
	private string _newLine="\r\n";
	private string _space="\t\t";
	private string _idalNamespace;
	private string _dalNameSpace;
	public DbSessionTemplate (Type[] types,string idalNamespace,string dalNameSpace)
	{
		_idalNamespace=idalNamespace;
		_dalNameSpace=dalNameSpace;
		string temp="";
		 foreach(Type type in types)	
		{
			if(type.Name=="MyContext") continue;
			temp+=_space+"private I"+type.Name.Replace("Model","")+"Dal  _"+type.Name.Replace("Model","")+"Dal;"+_newLine+
						_space+"public I"+type.Name.Replace("Model","")+"Dal "+type.Name.Replace("Model","")+"Dal"+_newLine+
						_space+"{"+_newLine+
						_space+"get"+_newLine+
						_space+"{"+_newLine+
						_space+_space+" if (_"+type.Name.Replace("Model","")+"Dal == null)"+_newLine+
						_space+_space+"{"+_newLine+
						_space+_space+_space+"_"+type.Name.Replace("Model","")+"Dal = DalFactory.Create"+type.Name.Replace("Model","")+"Dal();"+_newLine+
						_space+_space+"}"+_newLine+
						_space+_space+"return _"+type.Name.Replace("Model","")+"Dal;"+_newLine+
						_space+"}"+_newLine+
						_space+"set { _"+type.Name.Replace("Model","")+"Dal = value; }"+_newLine+
						_space+"}"+_newLine;
		}
		_template=temp;
	}

		public string FileName
	{
		get
			{
				return "DbSession.cs";
			}
	}

	public override string TransformText()
	{
		base.TransformText();
#>
//=============================================================================
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 AdvertInfoConfigurationAppend 分部方法。
// </auto-generated>
//=============================================================================
using <#=_dalNameSpace#>;
using <#=_idalNamespace#>;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace <#= DefaultNamespace.Split('.')[0] #>
{
 public class DbSession : IDbSession
    {
        /// <summary>
        /// 创建线程内唯一上下文对象
        /// </summary>
        public DbContext entity
        {
            get
            {
                return DbContextOnly.CreateEF();
            }
        }
		<#=_template#>
		 /// <summary>
        /// 保存
        /// </summary>
        /// <returns></returns>
        public bool SaveChanges()
        {
            return this.entity.SaveChanges() > 0;
        }
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
