<#+
// <copyright file="DalFactoryTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class DalFactoryTemplate : CSharpTemplate
{
	private string _template;
	private string _newLine="\r\n";
	private string _space="\t";
	private string _idalNamespace;
	public DalFactoryTemplate (Type[] types,string idalNamespace)
	{
		_idalNamespace=idalNamespace;
		string temp="";
		 foreach(Type type in types)	
		{
			if(type.Name=="MyContext") continue;
			temp+=_space+"public static I"+type.Name.Replace("Model","")+"Dal Create"+type.Name.Replace("Model","")+"Dal()"+_newLine+
								_space+"{"+_newLine+
								_space+_space+"using (var scope = container.BeginLifetimeScope())"+_newLine+
								_space+_space+"{"+_newLine+
								_space+_space+_space+" return scope.Resolve<I"+type.Name.Replace("Model","")+"Dal>();"+_newLine+
								_space+_space+"}"+_newLine+
								_space+"}"+_newLine;
		}
				_template=temp;
	}

	public string FileName
	{
		get
			{
				return "DalFactory.cs";
			}
	}

	public override string TransformText()
	{
		base.TransformText();
#>
//=============================================================================
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 AdvertInfoConfigurationAppend 分部方法。
// </auto-generated>
//=============================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using <#=_idalNamespace#>;
using System.Configuration;
using System.Reflection;
using Autofac;
using Autofac.Configuration;
namespace <#= DefaultNamespace.Split('.')[0] #>
{   
		 /// <summary>
		/// 抽象工厂（创建Dal层的实例）
		/// </summary>
		public  class DalFactory
    {
	      /// <summary>
		 /// 获取配置文件程序集和命名空间名称
		/// </summary>
      private static IContainer _container;
        public static IContainer container
        {
            get
            {
                if (_container == null)
                {
                    var builder = new ContainerBuilder();
                    builder.RegisterModule(new ConfigurationSettingsReader("autofac"));
                    _container= builder.Build();
                }
                return _container;
            }
        }
		<#=_template#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
