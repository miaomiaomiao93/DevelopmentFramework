<#+
// <copyright file="IBaseServiceTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class IBaseServiceTemplate : CSharpTemplate
{
	public string FileName
	{
		get
			{
				return "IBaseService.cs";
			}
	}
	private string _idalNameSpace;
	public IBaseServiceTemplate(string idalNameSpace)
	{
		_idalNameSpace=idalNameSpace;
	}

	public override string TransformText()
	{
		base.TransformText();
#>
//=============================================================================
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//		如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 AdvertInfoConfigurationAppend 分部方法。
// </auto-generated>
//=============================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using <#=_idalNameSpace#>;
namespace <#= DefaultNamespace.Split('.')[0] #>
{
  public  interface IBaseService<T>where T:class,new()
    {
      IDbSession dbSession { get; }
      IBaseDal<T> CurrentDal { get; set; }

      IQueryable<T> GetList(Expression<Func<T, bool>> whereLambda);

      IQueryable<T> GetPagingList<S>(int pageIndex, int pageSize, out int totalCount, bool isDec, Expression<Func<T, bool>> whereLambda, Expression<Func<T, S>> orderByLambda);

      T Add(T model);

      int Update(Expression<Func<T, bool>> whereLambda, Expression<Func<T, T>> updateLambda);

      int DeleteReal(Expression<Func<T, bool>> whereLambda);

      int DeleteFake(Expression<Func<T, bool>> whereLambda, Expression<Func<T, T>> updateLambda);
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
